#ifndef CLI_H
#define CLI_H
#include <ncurses.h>

#include "../brick_game/tetris.h"

/**
 * @brief Инициализирует графический пользовательский интерфейс для игры. Эта функция
 * настраивает терминал для отображения игры, инициализирует цветовые пары и
 * конфигурирует настройки терминала, такие как видимость курсора и режимы ввода.
 */
void initGui();

/**
 * @brief Выводит все состояние игры на экран, включая игровое поле,
 * следующую фигуру и информацию об игре, такую как очки и уровень. 
 * Также обновляет экран для обновления отображения.
 * @param game: Т текущее состояние игры, содержащее поле, следующую фигуру и 
 * статистику игры.
 * @param sp_start Время начала цикла.
 * @param sp_end Время окончания цикла.
 */
void printGame(GameInfo_t game, struct timespec sp_start,
               struct timespec sp_end);

/**
 * @brief Отображает игровое поле на экране. 
 * Итерация по каждой ячейке игрового поля и вывод символа пробела с цветом 
 * в зависимости от состояния ячейки.
 * @param game: Текущее состояние игры, содержащее поле, которое нужно отобразить.
 */
void printField(GameInfo_t game);

/**
 * @brief Отображает следующую фигуру на экране в отведенной области. 
 * Используется другой цвет, чтобы отличить следующую фигуру от игрового поля.
 * @param game: Текущее состояние игры, содержащее следующую фигуру для отображения.
 */
void printNextFigure(GameInfo_t game);

/**
 * @brief Выводит информацию, связанную с игрой, такую как текущий уровень, скорость,
 * счет и максимальный счет. Также отображает элементы управления и статус игры (например,
 * приостановлена) для игрока.
 * @param game: Текущее состояние игры, содержащее информацию для отображения.
 */
void printInfo(GameInfo_t game);

/**
 * @brief Считывает один символ с клавиатуры и возвращает действие
 * в зависимости от нажатой клавиши. Действия включают перемещение фигуры в разных
 * направлениях, начало новой игры, паузу и завершение игры.
 * @return UserAction_t: Действие, которое будет выполнено на основе ввода пользователя.
 */
UserAction_t getAction();

/**
 * @brief Вычисляет и выполняет задержку на основе скорости игры и времени,
 * затраченного на выполнение последнего кадра.
 * @param sp_start: Время начала последнего кадра.
 * @param sp_end: Время окончания последнего кадра.
 * @param game_speed: Текущая скорость игры, которая влияет на длительность задержки.
 */
void handleDelay(struct timespec sp_start, struct timespec sp_end,
                 int game_speed);

#endif